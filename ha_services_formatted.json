[
    {
        "domain": "homeassistant",
        "services": {
            "save_persistent_states": {
                "name": "Save persistent states",
                "description": "Saves the persistent states immediately. Maintains the normal periodic saving interval.",
                "fields": {}
            },
            "turn_off": {
                "name": "Generic turn off",
                "description": "Generic action to turn devices off under any domain.",
                "fields": {},
                "target": {
                    "entity": [
                        {}
                    ]
                }
            },
            "turn_on": {
                "name": "Generic turn on",
                "description": "Generic action to turn devices on under any domain.",
                "fields": {},
                "target": {
                    "entity": [
                        {}
                    ]
                }
            },
            "toggle": {
                "name": "Generic toggle",
                "description": "Generic action to toggle devices on/off under any domain.",
                "fields": {},
                "target": {
                    "entity": [
                        {}
                    ]
                }
            },
            "stop": {
                "name": "Stop",
                "description": "Stops Home Assistant.",
                "fields": {}
            },
            "restart": {
                "name": "Restart",
                "description": "Restarts Home Assistant.",
                "fields": {}
            },
            "check_config": {
                "name": "Check configuration",
                "description": "Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.",
                "fields": {}
            },
            "update_entity": {
                "name": "Update entity",
                "description": "Forces one or more entities to update its data.",
                "fields": {
                    "entity_id": {
                        "required": true,
                        "selector": {
                            "entity": {
                                "multiple": true
                            }
                        },
                        "name": "Entities to update",
                        "description": "List of entities to force update."
                    }
                }
            },
            "reload_core_config": {
                "name": "Reload core configuration",
                "description": "Reloads the core configuration from the YAML-configuration.",
                "fields": {}
            },
            "set_location": {
                "name": "Set location",
                "description": "Updates the Home Assistant location.",
                "fields": {
                    "latitude": {
                        "required": true,
                        "example": 32.87336,
                        "selector": {
                            "number": {
                                "mode": "box",
                                "min": -90,
                                "max": 90,
                                "step": "any"
                            }
                        },
                        "name": "Latitude",
                        "description": "Latitude of your location."
                    },
                    "longitude": {
                        "required": true,
                        "example": 117.22743,
                        "selector": {
                            "number": {
                                "mode": "box",
                                "min": -180,
                                "max": 180,
                                "step": "any"
                            }
                        },
                        "name": "Longitude",
                        "description": "Longitude of your location."
                    },
                    "elevation": {
                        "required": false,
                        "example": 120,
                        "selector": {
                            "number": {
                                "mode": "box",
                                "step": "any"
                            }
                        },
                        "name": "Elevation",
                        "description": "Elevation of your location above sea level."
                    }
                }
            },
            "reload_custom_templates": {
                "name": "Reload custom Jinja2 templates",
                "description": "Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.",
                "fields": {}
            },
            "reload_config_entry": {
                "name": "Reload config entry",
                "description": "Reloads the specified config entry.",
                "fields": {
                    "entry_id": {
                        "advanced": true,
                        "required": false,
                        "example": "8955375327824e14ba89e4b29cc3ec9a",
                        "selector": {
                            "text": null
                        },
                        "name": "Config entry ID",
                        "description": "The configuration entry ID of the entry to be reloaded."
                    }
                },
                "target": {
                    "entity": [
                        {}
                    ],
                    "device": [
                        {}
                    ]
                }
            },
            "reload_all": {
                "name": "Reload all",
                "description": "Reload all YAML configuration that can be reloaded without restarting Home Assistant.",
                "fields": {}
            }
        }
    },
    {
        "domain": "persistent_notification",
        "services": {
            "create": {
                "name": "Create",
                "description": "Shows a notification on the notifications panel.",
                "fields": {
                    "message": {
                        "required": true,
                        "example": "Please check your configuration.yaml.",
                        "selector": {
                            "text": null
                        },
                        "name": "Message",
                        "description": "Message body of the notification."
                    },
                    "title": {
                        "example": "Test notification",
                        "selector": {
                            "text": null
                        },
                        "name": "Title",
                        "description": "Optional title of the notification."
                    },
                    "notification_id": {
                        "example": 1234,
                        "selector": {
                            "text": null
                        },
                        "name": "Notification ID",
                        "description": "ID of the notification. This new notification will overwrite an existing notification with the same ID."
                    }
                }
            },
            "dismiss": {
                "name": "Dismiss",
                "description": "Deletes a notification from the notifications panel.",
                "fields": {
                    "notification_id": {
                        "required": true,
                        "example": 1234,
                        "selector": {
                            "text": null
                        },
                        "name": "Notification ID",
                        "description": "ID of the notification to be deleted."
                    }
                }
            },
            "dismiss_all": {
                "name": "Dismiss all",
                "description": "Deletes all notifications from the notifications panel.",
                "fields": {}
            }
        }
    },
    {
        "domain": "logger",
        "services": {
            "set_default_level": {
                "name": "Set default level",
                "description": "Sets the default log level for integrations.",
                "fields": {
                    "level": {
                        "selector": {
                            "select": {
                                "options": [
                                    "debug",
                                    "info",
                                    "warning",
                                    "error",
                                    "fatal",
                                    "critical"
                                ],
                                "translation_key": "level"
                            }
                        },
                        "name": "Level",
                        "description": "Default severity level for all integrations."
                    }
                }
            },
            "set_level": {
                "name": "Set level",
                "description": "Sets the log level for one or more integrations.",
                "fields": {}
            }
        }
    },
    {
        "domain": "system_log",
        "services": {
            "clear": {
                "name": "Clear",
                "description": "Deletes all log entries.",
                "fields": {}
            },
            "write": {
                "name": "Write",
                "description": "Write log entry.",
                "fields": {
                    "message": {
                        "required": true,
                        "example": "Something went wrong",
                        "selector": {
                            "text": null
                        },
                        "name": "Message",
                        "description": "Message to log."
                    },
                    "level": {
                        "default": "error",
                        "selector": {
                            "select": {
                                "options": [
                                    "debug",
                                    "info",
                                    "warning",
                                    "error",
                                    "critical"
                                ],
                                "translation_key": "level"
                            }
                        },
                        "name": "Level",
                        "description": "Log level."
                    },
                    "logger": {
                        "example": "mycomponent.myplatform",
                        "selector": {
                            "text": null
                        },
                        "name": "Logger",
                        "description": "Logger name under which to log the message. Defaults to `system_log.external`."
                    }
                }
            }
        }
    },
    {
        "domain": "person",
        "services": {
            "reload": {
                "name": "Reload",
                "description": "Reloads persons from the YAML-configuration.",
                "fields": {}
            }
        }
    },
    {
        "domain": "backup",
        "services": {
            "create": {
                "name": "Create backup",
                "description": "Creates a new backup.",
                "fields": {}
            },
            "create_automatic": {
                "name": "Create automatic backup",
                "description": "Creates a new backup with automatic backup settings.",
                "fields": {}
            }
        }
    },
    {
        "domain": "frontend",
        "services": {
            "set_theme": {
                "name": "Set the default theme",
                "description": "Sets the default theme Home Assistant uses. Can be overridden by a user.",
                "fields": {
                    "name": {
                        "required": true,
                        "example": "default",
                        "selector": {
                            "theme": {
                                "include_default": true
                            }
                        },
                        "name": "Theme",
                        "description": "Name of a theme."
                    },
                    "mode": {
                        "default": "light",
                        "selector": {
                            "select": {
                                "options": [
                                    "dark",
                                    "light"
                                ],
                                "translation_key": "mode"
                            }
                        },
                        "name": "Mode",
                        "description": "Theme mode."
                    }
                }
            },
            "reload_themes": {
                "name": "Reload themes",
                "description": "Reloads themes from the YAML-configuration.",
                "fields": {}
            }
        }
    },
    {
        "domain": "recorder",
        "services": {
            "purge": {
                "name": "Purge",
                "description": "Starts purge task - to clean up old data from your database.",
                "fields": {
                    "keep_days": {
                        "selector": {
                            "number": {
                                "min": 0,
                                "max": 365,
                                "unit_of_measurement": "days"
                            }
                        },
                        "name": "Days to keep",
                        "description": "Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged."
                    },
                    "repack": {
                        "default": false,
                        "selector": {
                            "boolean": null
                        },
                        "name": "Repack",
                        "description": "Attempt to save disk space by rewriting the entire database file."
                    },
                    "apply_filter": {
                        "default": false,
                        "selector": {
                            "boolean": null
                        },
                        "name": "Apply filter",
                        "description": "Apply `entity_id` and `event_type` filters in addition to time-based purge."
                    }
                }
            },
            "purge_entities": {
                "name": "Purge entities",
                "description": "Starts a purge task to remove the data related to specific entities from your database.",
                "fields": {
                    "entity_id": {
                        "required": false,
                        "selector": {
                            "entity": {
                                "multiple": true
                            }
                        },
                        "name": "Entities to remove",
                        "description": "List of entities for which the data is to be removed from the recorder database."
                    },
                    "domains": {
                        "example": "sun",
                        "required": false,
                        "selector": {
                            "object": null
                        },
                        "name": "Domains to remove",
                        "description": "List of domains for which the data needs to be removed from the recorder database."
                    },
                    "entity_globs": {
                        "example": "domain*.object_id*",
                        "required": false,
                        "selector": {
                            "object": null
                        },
                        "name": "Entity globs to remove",
                        "description": "List of glob patterns used to select the entities for which the data is to be removed from the recorder database."
                    },
                    "keep_days": {
                        "default": 0,
                        "selector": {
                            "number": {
                                "min": 0,
                                "max": 365,
                                "unit_of_measurement": "days"
                            }
                        },
                        "name": "Days to keep",
                        "description": "Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately."
                    }
                }
            },
            "enable": {
                "name": "Enable",
                "description": "Starts the recording of events and state changes.",
                "fields": {}
            },
            "disable": {
                "name": "Disable",
                "description": "Stops the recording of events and state changes.",
                "fields": {}
            }
        }
    },
    {
        "domain": "cloud",
        "services": {
            "remote_connect": {
                "name": "Enable remote access",
                "description": "Makes the instance UI accessible from outside of the local network by enabling your Home Assistant Cloud connection.",
                "fields": {}
            },
            "remote_disconnect": {
                "name": "Disable remote access",
                "description": "Disconnects the instance UI from Home Assistant Cloud. This disables access to it from outside your local network.",
                "fields": {}
            }
        }
    },
    {
        "domain": "ffmpeg",
        "services": {
            "start": {
                "name": "Start",
                "description": "Sends a start command to a ffmpeg based sensor.",
                "fields": {
                    "entity_id": {
                        "selector": {
                            "entity": {
                                "integration": "ffmpeg",
                                "domain": "binary_sensor"
                            }
                        },
                        "name": "Entity",
                        "description": "Name of entity that will start. Platform dependent."
                    }
                }
            },
            "stop": {
                "name": "Stop",
                "description": "Sends a stop command to a ffmpeg based sensor.",
                "fields": {
                    "entity_id": {
                        "selector": {
                            "entity": {
                                "integration": "ffmpeg",
                                "domain": "binary_sensor"
                            }
                        },
                        "name": "Entity",
                        "description": "Name of entity that will stop. Platform dependent."
                    }
                }
            },
            "restart": {
                "name": "Restart",
                "description": "Sends a restart command to a ffmpeg based sensor.",
                "fields": {
                    "entity_id": {
                        "selector": {
                            "entity": {
                                "integration": "ffmpeg",
                                "domain": "binary_sensor"
                            }
                        },
                        "name": "Entity",
                        "description": "Name of entity that will restart. Platform dependent."
                    }
                }
            }
        }
    },
    {
        "domain": "tts",
        "services": {
            "speak": {
                "name": "Speak",
                "description": "Speaks something using text-to-speech on a media player.",
                "fields": {
                    "media_player_entity_id": {
                        "required": true,
                        "selector": {
                            "entity": {
                                "domain": "media_player"
                            }
                        },
                        "name": "Media player entity",
                        "description": "Media players to play the message."
                    },
                    "message": {
                        "example": "My name is hanna",
                        "required": true,
                        "selector": {
                            "text": null
                        },
                        "name": "Message",
                        "description": "The text you want to convert into speech so that you can listen to it on your device."
                    },
                    "cache": {
                        "default": true,
                        "selector": {
                            "boolean": null
                        },
                        "name": "Cache",
                        "description": "Stores this message locally so that when the text is requested again, the output can be produced more quickly."
                    },
                    "language": {
                        "example": "ru",
                        "selector": {
                            "text": null
                        },
                        "name": "Language",
                        "description": "Language to use for speech generation."
                    },
                    "options": {
                        "advanced": true,
                        "example": "platform specific",
                        "selector": {
                            "object": null
                        },
                        "name": "Options",
                        "description": "A dictionary containing integration-specific options."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "tts"
                            ]
                        }
                    ]
                }
            },
            "clear_cache": {
                "name": "Clear TTS cache",
                "description": "Removes all cached text-to-speech files and purges the memory.",
                "fields": {}
            },
            "cloud_say": {
                "name": "Say a TTS message with cloud",
                "description": "Say something using text-to-speech on a media player with cloud.",
                "fields": {
                    "entity_id": {
                        "required": true,
                        "selector": {
                            "entity": {
                                "domain": "media_player"
                            }
                        }
                    },
                    "message": {
                        "example": "My name is hanna",
                        "required": true,
                        "selector": {
                            "text": null
                        }
                    },
                    "cache": {
                        "default": false,
                        "selector": {
                            "boolean": null
                        }
                    },
                    "language": {
                        "example": "ru",
                        "selector": {
                            "text": null
                        }
                    },
                    "options": {
                        "advanced": true,
                        "example": "platform specific",
                        "selector": {
                            "object": null
                        }
                    }
                }
            }
        }
    },
    {
        "domain": "scene",
        "services": {
            "turn_on": {
                "name": "Activate",
                "description": "Activates a scene.",
                "fields": {
                    "transition": {
                        "selector": {
                            "number": {
                                "min": 0,
                                "max": 300,
                                "unit_of_measurement": "seconds"
                            }
                        },
                        "name": "Transition",
                        "description": "Time it takes the devices to transition into the states defined in the scene."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "scene"
                            ]
                        }
                    ]
                }
            },
            "reload": {
                "name": "Reload",
                "description": "Reloads the scenes from the YAML-configuration.",
                "fields": {}
            },
            "apply": {
                "name": "Apply",
                "description": "Activates a scene with configuration.",
                "fields": {
                    "entities": {
                        "required": true,
                        "example": "light.kitchen: \"on\"\nlight.ceiling:\n  state: \"on\"\n  brightness: 80\n",
                        "selector": {
                            "object": null
                        },
                        "name": "Entities state",
                        "description": "List of entities and their target state."
                    },
                    "transition": {
                        "selector": {
                            "number": {
                                "min": 0,
                                "max": 300,
                                "unit_of_measurement": "seconds"
                            }
                        },
                        "name": "Transition",
                        "description": "Time it takes the devices to transition into the states defined in the scene."
                    }
                }
            },
            "create": {
                "name": "Create",
                "description": "Creates a new scene.",
                "fields": {
                    "scene_id": {
                        "required": true,
                        "example": "all_lights",
                        "selector": {
                            "text": null
                        },
                        "name": "Scene entity ID",
                        "description": "The entity ID of the new scene."
                    },
                    "entities": {
                        "advanced": true,
                        "example": "light.tv_back_light: \"on\"\nlight.ceiling:\n  state: \"on\"\n  brightness: 200\n",
                        "selector": {
                            "object": null
                        },
                        "name": "Entity states",
                        "description": "List of entities and their target state. If your entities are already in the target state right now, use 'Entities snapshot' instead."
                    },
                    "snapshot_entities": {
                        "example": "- light.ceiling\n- light.kitchen\n",
                        "selector": {
                            "entity": {
                                "multiple": true
                            }
                        },
                        "name": "Entities snapshot",
                        "description": "List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine 'Entities snapshot' with 'Entity states'."
                    }
                }
            },
            "delete": {
                "name": "Delete",
                "description": "Deletes a dynamically created scene.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "integration": "homeassistant",
                            "domain": [
                                "scene"
                            ]
                        }
                    ]
                }
            }
        }
    },
    {
        "domain": "conversation",
        "services": {
            "process": {
                "name": "Process",
                "description": "Launches a conversation from a transcribed text.",
                "fields": {
                    "text": {
                        "example": "Turn all lights on",
                        "required": true,
                        "selector": {
                            "text": null
                        },
                        "name": "Text",
                        "description": "Transcribed text input."
                    },
                    "language": {
                        "example": "NL",
                        "selector": {
                            "text": null
                        },
                        "name": "Language",
                        "description": "Language of text. Defaults to server language."
                    },
                    "agent_id": {
                        "example": "homeassistant",
                        "selector": {
                            "conversation_agent": null
                        },
                        "name": "Agent",
                        "description": "Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands."
                    },
                    "conversation_id": {
                        "example": "my_conversation_1",
                        "selector": {
                            "text": null
                        },
                        "name": "Conversation ID",
                        "description": "ID of the conversation, to be able to continue a previous conversation"
                    }
                },
                "response": {
                    "optional": true
                }
            },
            "reload": {
                "name": "Reload",
                "description": "Reloads the intent configuration.",
                "fields": {
                    "language": {
                        "example": "NL",
                        "selector": {
                            "text": null
                        },
                        "name": "Language",
                        "description": "Language to clear cached intents for. Defaults to server language."
                    },
                    "agent_id": {
                        "example": "homeassistant",
                        "selector": {
                            "conversation_agent": null
                        },
                        "name": "Agent",
                        "description": "Conversation agent to reload."
                    }
                }
            }
        }
    },
    {
        "domain": "camera",
        "services": {
            "enable_motion_detection": {
                "name": "Enable motion detection",
                "description": "Enables the motion detection.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "camera"
                            ]
                        }
                    ]
                }
            },
            "disable_motion_detection": {
                "name": "Disable motion detection",
                "description": "Disables the motion detection.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "camera"
                            ]
                        }
                    ]
                }
            },
            "turn_off": {
                "name": "Turn off",
                "description": "Turns off the camera.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "camera"
                            ]
                        }
                    ]
                }
            },
            "turn_on": {
                "name": "Turn on",
                "description": "Turns on the camera.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "camera"
                            ]
                        }
                    ]
                }
            },
            "snapshot": {
                "name": "Take snapshot",
                "description": "Takes a snapshot from a camera.",
                "fields": {
                    "filename": {
                        "required": true,
                        "example": "/tmp/snapshot_{{ entity_id.name }}.jpg",
                        "selector": {
                            "text": null
                        },
                        "name": "Filename",
                        "description": "Full path to filename."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "camera"
                            ]
                        }
                    ]
                }
            },
            "play_stream": {
                "name": "Play stream",
                "description": "Plays the camera stream on a supported media player.",
                "fields": {
                    "media_player": {
                        "required": true,
                        "selector": {
                            "entity": {
                                "domain": "media_player"
                            }
                        },
                        "name": "Media player",
                        "description": "Media players to stream to."
                    },
                    "format": {
                        "default": "hls",
                        "selector": {
                            "select": {
                                "options": [
                                    "hls"
                                ]
                            }
                        },
                        "name": "Format",
                        "description": "Stream format supported by the media player."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "camera"
                            ]
                        }
                    ]
                }
            },
            "record": {
                "name": "Record",
                "description": "Creates a recording of a live camera feed.",
                "fields": {
                    "filename": {
                        "required": true,
                        "example": "/tmp/snapshot_{{ entity_id.name }}.mp4",
                        "selector": {
                            "text": null
                        },
                        "name": "Filename",
                        "description": "Full path to filename. Must be mp4."
                    },
                    "duration": {
                        "default": 30,
                        "selector": {
                            "number": {
                                "min": 1,
                                "max": 3600,
                                "unit_of_measurement": "seconds"
                            }
                        },
                        "name": "Duration",
                        "description": "Planned duration of the recording. The actual duration may vary."
                    },
                    "lookback": {
                        "default": 0,
                        "selector": {
                            "number": {
                                "min": 0,
                                "max": 300,
                                "unit_of_measurement": "seconds"
                            }
                        },
                        "name": "Lookback",
                        "description": "Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "camera"
                            ]
                        }
                    ]
                }
            }
        }
    },
    {
        "domain": "input_button",
        "services": {
            "reload": {
                "name": "Reload",
                "description": "Reloads helpers from the YAML-configuration.",
                "fields": {}
            },
            "press": {
                "name": "Press",
                "description": "Mimics the physical button press on the device.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "input_button"
                            ]
                        }
                    ]
                }
            }
        }
    },
    {
        "domain": "zone",
        "services": {
            "reload": {
                "name": "Reload",
                "description": "Reloads zones from the YAML-configuration.",
                "fields": {}
            }
        }
    },
    {
        "domain": "input_number",
        "services": {
            "reload": {
                "name": "Reload",
                "description": "Reloads helpers from the YAML-configuration.",
                "fields": {}
            },
            "set_value": {
                "name": "Set",
                "description": "Sets the value.",
                "fields": {
                    "value": {
                        "required": true,
                        "selector": {
                            "number": {
                                "min": 0,
                                "max": 9223372036854775807,
                                "step": 0.001,
                                "mode": "box"
                            }
                        },
                        "name": "Value",
                        "description": "The target value."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "input_number"
                            ]
                        }
                    ]
                }
            },
            "increment": {
                "name": "Increment",
                "description": "Increments the current value by 1 step.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "input_number"
                            ]
                        }
                    ]
                }
            },
            "decrement": {
                "name": "Decrement",
                "description": "Decrements the current value by 1 step.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "input_number"
                            ]
                        }
                    ]
                }
            }
        }
    },
    {
        "domain": "timer",
        "services": {
            "reload": {
                "name": "Reload",
                "description": "Reloads timers from the YAML-configuration.",
                "fields": {}
            },
            "start": {
                "name": "Start",
                "description": "Starts a timer or restarts it with a provided duration.",
                "fields": {
                    "duration": {
                        "example": "00:01:00 or 60",
                        "selector": {
                            "text": null
                        },
                        "name": "Duration",
                        "description": "Custom duration to restart the timer with."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "timer"
                            ]
                        }
                    ]
                }
            },
            "pause": {
                "name": "Pause",
                "description": "Pauses a running timer, retaining the remaining duration for later continuation.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "timer"
                            ]
                        }
                    ]
                }
            },
            "cancel": {
                "name": "Cancel",
                "description": "Resets a timer's duration to the last known initial value without firing the timer finished event.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "timer"
                            ]
                        }
                    ]
                }
            },
            "finish": {
                "name": "Finish",
                "description": "Finishes a running timer earlier than scheduled.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "timer"
                            ]
                        }
                    ]
                }
            },
            "change": {
                "name": "Change",
                "description": "Changes a timer by adding or subtracting a given duration.",
                "fields": {
                    "duration": {
                        "default": 0,
                        "required": true,
                        "example": "00:01:00, 60 or -60",
                        "selector": {
                            "text": null
                        },
                        "name": "Duration",
                        "description": "Duration to add to or subtract from the running timer."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "timer"
                            ]
                        }
                    ]
                }
            }
        }
    },
    {
        "domain": "input_select",
        "services": {
            "reload": {
                "name": "Reload",
                "description": "Reloads helpers from the YAML-configuration.",
                "fields": {}
            },
            "select_first": {
                "name": "First",
                "description": "Selects the first option.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "input_select"
                            ]
                        }
                    ]
                }
            },
            "select_last": {
                "name": "Last",
                "description": "Selects the last option.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "input_select"
                            ]
                        }
                    ]
                }
            },
            "select_next": {
                "name": "Next",
                "description": "Select the next option.",
                "fields": {
                    "cycle": {
                        "default": true,
                        "selector": {
                            "boolean": null
                        },
                        "name": "Cycle",
                        "description": "If the option should cycle from the last to the first option on the list."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "input_select"
                            ]
                        }
                    ]
                }
            },
            "select_option": {
                "name": "Select",
                "description": "Selects an option.",
                "fields": {
                    "option": {
                        "required": true,
                        "example": "\"Item A\"",
                        "selector": {
                            "text": null
                        },
                        "name": "Option",
                        "description": "Option to be selected."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "input_select"
                            ]
                        }
                    ]
                }
            },
            "select_previous": {
                "name": "Previous",
                "description": "Selects the previous option.",
                "fields": {
                    "cycle": {
                        "default": true,
                        "selector": {
                            "boolean": null
                        },
                        "name": "Cycle",
                        "description": "If the option should cycle from the last to the first option on the list."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "input_select"
                            ]
                        }
                    ]
                }
            },
            "set_options": {
                "name": "Set options",
                "description": "Sets the options.",
                "fields": {
                    "options": {
                        "required": true,
                        "example": "[\"Item A\", \"Item B\", \"Item C\"]",
                        "selector": {
                            "text": {
                                "multiple": true
                            }
                        },
                        "name": "Options",
                        "description": "List of options."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "input_select"
                            ]
                        }
                    ]
                }
            }
        }
    },
    {
        "domain": "logbook",
        "services": {
            "log": {
                "name": "Log",
                "description": "Creates a custom entry in the logbook.",
                "fields": {
                    "name": {
                        "required": true,
                        "example": "Kitchen",
                        "selector": {
                            "text": null
                        },
                        "name": "Name",
                        "description": "Custom name for an entity, can be referenced using an `entity_id`."
                    },
                    "message": {
                        "required": true,
                        "example": "is being used",
                        "selector": {
                            "text": null
                        },
                        "name": "Message",
                        "description": "Message of the logbook entry."
                    },
                    "entity_id": {
                        "selector": {
                            "entity": null
                        },
                        "name": "Entity ID",
                        "description": "Entity to reference in the logbook entry."
                    },
                    "domain": {
                        "example": "light",
                        "selector": {
                            "text": null
                        },
                        "name": "Domain",
                        "description": "Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry."
                    }
                }
            }
        }
    },
    {
        "domain": "input_boolean",
        "services": {
            "reload": {
                "name": "Reload",
                "description": "Reloads helpers from the YAML-configuration.",
                "fields": {}
            },
            "turn_on": {
                "name": "Turn on",
                "description": "Turns on the helper.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "input_boolean"
                            ]
                        }
                    ]
                }
            },
            "turn_off": {
                "name": "Turn off",
                "description": "Turns off the helper.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "input_boolean"
                            ]
                        }
                    ]
                }
            },
            "toggle": {
                "name": "Toggle",
                "description": "Toggles the helper on/off.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "input_boolean"
                            ]
                        }
                    ]
                }
            }
        }
    },
    {
        "domain": "automation",
        "services": {
            "trigger": {
                "name": "Trigger",
                "description": "Triggers the actions of an automation.",
                "fields": {
                    "skip_condition": {
                        "default": true,
                        "selector": {
                            "boolean": null
                        },
                        "name": "Skip conditions",
                        "description": "Defines whether or not the conditions will be skipped."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "automation"
                            ]
                        }
                    ]
                }
            },
            "toggle": {
                "name": "Toggle",
                "description": "Toggles (enable / disable) an automation.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "automation"
                            ]
                        }
                    ]
                }
            },
            "turn_on": {
                "name": "Turn on",
                "description": "Enables an automation.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "automation"
                            ]
                        }
                    ]
                }
            },
            "turn_off": {
                "name": "Turn off",
                "description": "Disables an automation.",
                "fields": {
                    "stop_actions": {
                        "default": true,
                        "selector": {
                            "boolean": null
                        },
                        "name": "Stop actions",
                        "description": "Stops currently running actions."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "automation"
                            ]
                        }
                    ]
                }
            },
            "reload": {
                "name": "Reload",
                "description": "Reloads the automation configuration.",
                "fields": {}
            }
        }
    },
    {
        "domain": "script",
        "services": {
            "reload": {
                "name": "Reload",
                "description": "Reloads all the available scripts.",
                "fields": {}
            },
            "turn_on": {
                "name": "Turn on",
                "description": "Runs the sequence of actions defined in a script.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "script"
                            ]
                        }
                    ]
                }
            },
            "turn_off": {
                "name": "Turn off",
                "description": "Stops a running script.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "script"
                            ]
                        }
                    ]
                }
            },
            "toggle": {
                "name": "Toggle",
                "description": "Starts a script if it isn't running, stops it otherwise.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "script"
                            ]
                        }
                    ]
                }
            }
        }
    },
    {
        "domain": "zwave_js",
        "services": {
            "set_config_parameter": {
                "name": "Set device configuration parameter",
                "description": "Changes the configuration parameters of your Z-Wave devices.",
                "fields": {
                    "area_id": {
                        "example": "living_room",
                        "selector": {
                            "area": {
                                "device": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Area ID(s)",
                        "description": "The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action."
                    },
                    "device_id": {
                        "example": "8f4219cfa57e23f6f669c4616c2205e2",
                        "selector": {
                            "device": {
                                "filter": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Device ID(s)",
                        "description": "The device(s) to target for this action."
                    },
                    "entity_id": {
                        "example": "sensor.living_room_temperature",
                        "selector": {
                            "entity": {
                                "filter": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Entity ID(s)",
                        "description": "The entity ID(s) to target for this action."
                    },
                    "endpoint": {
                        "example": 1,
                        "default": 0,
                        "required": false,
                        "selector": {
                            "text": null
                        },
                        "name": "Endpoint",
                        "description": "The configuration parameter's endpoint."
                    },
                    "parameter": {
                        "example": "Minimum brightness level",
                        "required": true,
                        "selector": {
                            "text": null
                        },
                        "name": "Parameter",
                        "description": "The name (or ID) of the configuration parameter you want to configure."
                    },
                    "bitmask": {
                        "advanced": true,
                        "selector": {
                            "text": null
                        },
                        "name": "Bitmask",
                        "description": "Target a specific bitmask (see the documentation for more information). Cannot be combined with 'Value size' or 'Value format'."
                    },
                    "value": {
                        "example": 5,
                        "required": true,
                        "selector": {
                            "text": null
                        },
                        "name": "Value",
                        "description": "The new value to set for this configuration parameter."
                    },
                    "value_size": {
                        "example": 1,
                        "selector": {
                            "number": {
                                "min": 1,
                                "max": 4
                            }
                        },
                        "name": "Value size",
                        "description": "Size of the value, either 1, 2, or 4. Used in combination with 'Value format' when a config parameter is not defined in your device's configuration file. Cannot be combined with 'Bitmask'."
                    },
                    "value_format": {
                        "example": 1,
                        "selector": {
                            "number": {
                                "min": 0,
                                "max": 3
                            }
                        },
                        "name": "Value format",
                        "description": "Format of the value, 0 for signed integer, 1 for unsigned integer, 2 for enumerated, 3 for bitfield. Used in combination with 'Value size' when a config parameter is not defined in your device's configuration file. Cannot be combined with 'Bitmask'."
                    }
                }
            },
            "bulk_set_partial_config_parameters": {
                "name": "Bulk set partial configuration parameters (advanced)",
                "description": "Allows for bulk setting partial parameters. Useful when multiple partial parameters have to be set at the same time.",
                "fields": {
                    "area_id": {
                        "example": "living_room",
                        "selector": {
                            "area": {
                                "device": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Area ID(s)",
                        "description": "The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action."
                    },
                    "device_id": {
                        "example": "8f4219cfa57e23f6f669c4616c2205e2",
                        "selector": {
                            "device": {
                                "filter": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Device ID(s)",
                        "description": "The device(s) to target for this action."
                    },
                    "entity_id": {
                        "example": "sensor.living_room_temperature",
                        "selector": {
                            "entity": {
                                "filter": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Entity ID(s)",
                        "description": "The entity ID(s) to target for this action."
                    },
                    "endpoint": {
                        "example": 1,
                        "default": 0,
                        "required": false,
                        "selector": {
                            "text": null
                        },
                        "name": "Endpoint",
                        "description": "The configuration parameter's endpoint."
                    },
                    "parameter": {
                        "example": 9,
                        "required": true,
                        "selector": {
                            "text": null
                        },
                        "name": "Parameter",
                        "description": "The name (or ID) of the configuration parameter you want to configure."
                    },
                    "value": {
                        "example": "\"0x1\": 1\n\"0x10\": 1\n\"0x20\": 1\n\"0x40\": 1\n",
                        "required": true,
                        "selector": {
                            "object": null
                        },
                        "name": "Value",
                        "description": "The new value(s) to set for this configuration parameter. Can either be a raw integer value to represent the bulk change or a mapping where the key is the bitmask (either in hex or integer form) and the value is the new value you want to set for that partial parameter."
                    }
                }
            },
            "refresh_value": {
                "name": "Refresh values",
                "description": "Force updates the values of a Z-Wave entity.",
                "fields": {
                    "entity_id": {
                        "required": true,
                        "example": "- sensor.family_room_motion\n- switch.kitchen\n",
                        "selector": {
                            "entity": {
                                "integration": "zwave_js",
                                "multiple": true
                            }
                        },
                        "name": "Entities",
                        "description": "Entities to refresh."
                    },
                    "refresh_all_values": {
                        "default": false,
                        "selector": {
                            "boolean": null
                        },
                        "name": "Refresh all values",
                        "description": "Whether to refresh all values or just the primary value."
                    }
                }
            },
            "set_value": {
                "name": "Set a value (advanced)",
                "description": "Changes any value that Z-Wave recognizes on a Z-Wave device. This action has minimal validation so only use this action if you know what you are doing.",
                "fields": {
                    "area_id": {
                        "example": "living_room",
                        "selector": {
                            "area": {
                                "device": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Area ID(s)",
                        "description": "The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action."
                    },
                    "device_id": {
                        "example": "8f4219cfa57e23f6f669c4616c2205e2",
                        "selector": {
                            "device": {
                                "filter": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Device ID(s)",
                        "description": "The device(s) to target for this action."
                    },
                    "entity_id": {
                        "example": "sensor.living_room_temperature",
                        "selector": {
                            "entity": {
                                "filter": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Entity ID(s)",
                        "description": "The entity ID(s) to target for this action."
                    },
                    "command_class": {
                        "example": 117,
                        "required": true,
                        "selector": {
                            "text": null
                        },
                        "name": "Command class",
                        "description": "The ID of the command class for the value."
                    },
                    "endpoint": {
                        "example": 1,
                        "required": false,
                        "selector": {
                            "text": null
                        },
                        "name": "Endpoint",
                        "description": "The endpoint for the value."
                    },
                    "property": {
                        "example": "currentValue",
                        "required": true,
                        "selector": {
                            "text": null
                        },
                        "name": "Property",
                        "description": "The ID of the property for the value."
                    },
                    "property_key": {
                        "example": 1,
                        "required": false,
                        "selector": {
                            "text": null
                        },
                        "name": "Property key",
                        "description": "The ID of the property key for the value."
                    },
                    "value": {
                        "example": "ffbb99",
                        "required": true,
                        "selector": {
                            "object": null
                        },
                        "name": "Value",
                        "description": "The new value to set."
                    },
                    "options": {
                        "required": false,
                        "selector": {
                            "object": null
                        },
                        "name": "Options",
                        "description": "Set value options map. Refer to the Z-Wave documentation for more information on what options can be set."
                    },
                    "wait_for_result": {
                        "required": false,
                        "selector": {
                            "boolean": null
                        },
                        "name": "Wait for result",
                        "description": "Whether to wait for a response from the node. If not included in the payload, the integration will decide whether to wait or not. If enabled, the action can take a while if setting a value on an asleep battery device."
                    }
                }
            },
            "multicast_set_value": {
                "name": "Set a value on multiple devices via multicast (advanced)",
                "description": "Changes any value that Z-Wave recognizes on multiple Z-Wave devices using multicast, so all devices receive the message simultaneously. This action has minimal validation so only use this action if you know what you are doing.",
                "fields": {
                    "area_id": {
                        "example": "living_room",
                        "selector": {
                            "area": {
                                "device": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Area ID(s)",
                        "description": "The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action."
                    },
                    "device_id": {
                        "example": "8f4219cfa57e23f6f669c4616c2205e2",
                        "selector": {
                            "device": {
                                "filter": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Device ID(s)",
                        "description": "The device(s) to target for this action."
                    },
                    "entity_id": {
                        "example": "sensor.living_room_temperature",
                        "selector": {
                            "entity": {
                                "filter": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Entity ID(s)",
                        "description": "The entity ID(s) to target for this action."
                    },
                    "broadcast": {
                        "example": true,
                        "required": false,
                        "selector": {
                            "boolean": null
                        },
                        "name": "Broadcast",
                        "description": "Whether the command should be broadcast to all devices on the network."
                    },
                    "command_class": {
                        "example": 117,
                        "required": true,
                        "selector": {
                            "text": null
                        },
                        "name": "Command class",
                        "description": "The ID of the command class for the value."
                    },
                    "endpoint": {
                        "example": 1,
                        "required": false,
                        "selector": {
                            "text": null
                        },
                        "name": "Endpoint",
                        "description": "The endpoint for the value."
                    },
                    "property": {
                        "example": "currentValue",
                        "required": true,
                        "selector": {
                            "text": null
                        },
                        "name": "Property",
                        "description": "The ID of the property for the value."
                    },
                    "property_key": {
                        "example": 1,
                        "required": false,
                        "selector": {
                            "text": null
                        },
                        "name": "Property key",
                        "description": "The ID of the property key for the value."
                    },
                    "options": {
                        "required": false,
                        "selector": {
                            "object": null
                        },
                        "name": "Options",
                        "description": "Set value options map. Refer to the Z-Wave documentation for more information on what options can be set."
                    },
                    "value": {
                        "example": "ffbb99",
                        "required": true,
                        "selector": {
                            "object": null
                        },
                        "name": "Value",
                        "description": "The new value to set."
                    }
                }
            },
            "ping": {
                "name": "Ping a node",
                "description": "Forces Z-Wave to try to reach a node. This can be used to update the status of the node in Z-Wave when you think it doesn't accurately reflect reality, e.g. reviving a failed/dead node or marking the node as asleep.",
                "fields": {
                    "area_id": {
                        "example": "living_room",
                        "selector": {
                            "area": {
                                "device": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Area ID(s)",
                        "description": "The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action."
                    },
                    "device_id": {
                        "example": "8f4219cfa57e23f6f669c4616c2205e2",
                        "selector": {
                            "device": {
                                "filter": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Device ID(s)",
                        "description": "The device(s) to target for this action."
                    },
                    "entity_id": {
                        "example": "sensor.living_room_temperature",
                        "selector": {
                            "entity": {
                                "filter": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Entity ID(s)",
                        "description": "The entity ID(s) to target for this action."
                    }
                }
            },
            "invoke_cc_api": {
                "name": "Invoke a Command Class API on a node (advanced)",
                "description": "Calls a Command Class API on a node. Some Command Classes can't be fully controlled via the `set_value` action and require direct calls to the Command Class API.",
                "fields": {
                    "area_id": {
                        "example": "living_room",
                        "selector": {
                            "area": {
                                "device": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Area ID(s)",
                        "description": "The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action."
                    },
                    "device_id": {
                        "example": "8f4219cfa57e23f6f669c4616c2205e2",
                        "selector": {
                            "device": {
                                "filter": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Device ID(s)",
                        "description": "The device(s) to target for this action."
                    },
                    "entity_id": {
                        "example": "sensor.living_room_temperature",
                        "selector": {
                            "entity": {
                                "filter": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Entity ID(s)",
                        "description": "The entity ID(s) to target for this action."
                    },
                    "command_class": {
                        "example": 132,
                        "required": true,
                        "selector": {
                            "text": null
                        },
                        "name": "Command class",
                        "description": "The ID of the command class that you want to issue a command to."
                    },
                    "endpoint": {
                        "example": 1,
                        "required": false,
                        "selector": {
                            "text": null
                        },
                        "name": "Endpoint",
                        "description": "The endpoint to call the API on. If an endpoint is specified, that endpoint will be targeted for all nodes associated with the target areas, devices, and/or entities. If an endpoint is not specified, the root endpoint (0) will be targeted for nodes associated with target areas and devices, and the endpoint for the primary value of each entity will be targeted."
                    },
                    "method_name": {
                        "example": "setInterval",
                        "required": true,
                        "selector": {
                            "text": null
                        },
                        "name": "Method name",
                        "description": "The name of the API method to call. Refer to the Z-Wave Command Class API documentation (https://zwave-js.github.io/node-zwave-js/#/api/CCs/index) for available methods."
                    },
                    "parameters": {
                        "example": "[1, 1]",
                        "required": true,
                        "selector": {
                            "object": null
                        },
                        "name": "Parameters",
                        "description": "A list of parameters to pass to the API method. Refer to the Z-Wave Command Class API documentation (https://zwave-js.github.io/node-zwave-js/#/api/CCs/index) for parameters."
                    }
                }
            },
            "refresh_notifications": {
                "name": "Refresh notifications on a node (advanced)",
                "description": "Refreshes notifications on a node based on notification type and optionally notification event.",
                "fields": {
                    "area_id": {
                        "example": "living_room",
                        "selector": {
                            "area": {
                                "device": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Area ID(s)",
                        "description": "The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action."
                    },
                    "device_id": {
                        "example": "8f4219cfa57e23f6f669c4616c2205e2",
                        "selector": {
                            "device": {
                                "filter": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Device ID(s)",
                        "description": "The device(s) to target for this action."
                    },
                    "entity_id": {
                        "example": "sensor.living_room_temperature",
                        "selector": {
                            "entity": {
                                "filter": [
                                    {
                                        "integration": "zwave_js"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Entity ID(s)",
                        "description": "The entity ID(s) to target for this action."
                    },
                    "notification_type": {
                        "example": 1,
                        "required": true,
                        "selector": {
                            "number": {
                                "min": 1,
                                "max": 22,
                                "mode": "box"
                            }
                        },
                        "name": "Notification Type",
                        "description": "The Notification Type number as defined in the Z-Wave specs."
                    },
                    "notification_event": {
                        "example": 1,
                        "required": false,
                        "selector": {
                            "number": {
                                "min": 1,
                                "max": 255,
                                "mode": "box"
                            }
                        },
                        "name": "Notification Event",
                        "description": "The Notification Event number as defined in the Z-Wave specs."
                    }
                }
            },
            "reset_meter": {
                "name": "Reset meters on a node",
                "description": "Resets the meters on a node.",
                "fields": {
                    "area_id": {
                        "example": "living_room",
                        "selector": {
                            "area": {
                                "entity": [
                                    {
                                        "integration": "zwave_js",
                                        "domain": "sensor"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Area ID(s)",
                        "description": "The area(s) to target for this action. If an area is specified, all Z-Wave devices and entities in that area will be targeted for this action."
                    },
                    "device_id": {
                        "example": "8f4219cfa57e23f6f669c4616c2205e2",
                        "selector": {
                            "device": {
                                "entity": [
                                    {
                                        "integration": "zwave_js",
                                        "domain": "sensor"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Device ID(s)",
                        "description": "The device(s) to target for this action."
                    },
                    "entity_id": {
                        "example": "sensor.living_room_temperature",
                        "selector": {
                            "entity": {
                                "filter": [
                                    {
                                        "integration": "zwave_js",
                                        "domain": "sensor"
                                    }
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Entity ID(s)",
                        "description": "The entity ID(s) to target for this action."
                    },
                    "meter_type": {
                        "example": 1,
                        "required": false,
                        "selector": {
                            "text": null
                        },
                        "name": "Meter type",
                        "description": "The type of meter to reset. Not all meters support the ability to pick a meter type to reset."
                    },
                    "value": {
                        "example": 5,
                        "required": false,
                        "selector": {
                            "text": null
                        },
                        "name": "Target value",
                        "description": "The value that meters should be reset to. Not all meters support the ability to be reset to a specific value."
                    }
                }
            }
        }
    },
    {
        "domain": "input_text",
        "services": {
            "reload": {
                "name": "Reload",
                "description": "Reloads helpers from the YAML-configuration.",
                "fields": {}
            },
            "set_value": {
                "name": "Set",
                "description": "Sets the value.",
                "fields": {
                    "value": {
                        "required": true,
                        "example": "This is an example text",
                        "selector": {
                            "text": null
                        },
                        "name": "Value",
                        "description": "The target value."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "input_text"
                            ]
                        }
                    ]
                }
            }
        }
    },
    {
        "domain": "counter",
        "services": {
            "increment": {
                "name": "Increment",
                "description": "Increments a counter by its step size.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "counter"
                            ]
                        }
                    ]
                }
            },
            "decrement": {
                "name": "Decrement",
                "description": "Decrements a counter by its step size.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "counter"
                            ]
                        }
                    ]
                }
            },
            "reset": {
                "name": "Reset",
                "description": "Resets a counter to its initial value.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "counter"
                            ]
                        }
                    ]
                }
            },
            "set_value": {
                "name": "Set",
                "description": "Sets the counter to a specific value.",
                "fields": {
                    "value": {
                        "required": true,
                        "selector": {
                            "number": {
                                "min": 0,
                                "max": 9223372036854775807,
                                "mode": "box"
                            }
                        },
                        "name": "Value",
                        "description": "The new counter value the entity should be set to."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "counter"
                            ]
                        }
                    ]
                }
            }
        }
    },
    {
        "domain": "shopping_list",
        "services": {
            "add_item": {
                "name": "Add item",
                "description": "Adds an item to the shopping list.",
                "fields": {
                    "name": {
                        "required": true,
                        "example": "Beer",
                        "selector": {
                            "text": null
                        },
                        "name": "Name",
                        "description": "The name of the item to add."
                    }
                }
            },
            "remove_item": {
                "name": "Remove item",
                "description": "Removes the first item with matching name from the shopping list.",
                "fields": {
                    "name": {
                        "required": true,
                        "example": "Beer",
                        "selector": {
                            "text": null
                        },
                        "name": "Name",
                        "description": "The name of the item to remove."
                    }
                }
            },
            "complete_item": {
                "name": "Complete item",
                "description": "Marks the first item with matching name as completed in the shopping list.",
                "fields": {
                    "name": {
                        "required": true,
                        "example": "Beer",
                        "selector": {
                            "text": null
                        },
                        "name": "Name",
                        "description": "The name of the item to mark as completed (without removing)."
                    }
                }
            },
            "incomplete_item": {
                "name": "Incomplete item",
                "description": "Marks the first item with matching name as incomplete in the shopping list.",
                "fields": {
                    "name": {
                        "example": "Beer",
                        "required": true,
                        "selector": {
                            "text": null
                        },
                        "name": "Name",
                        "description": "The name of the item to mark as incomplete."
                    }
                }
            },
            "complete_all": {
                "name": "Complete all",
                "description": "Marks all items as completed in the shopping list (without removing them from the list).",
                "fields": {}
            },
            "incomplete_all": {
                "name": "Incomplete all",
                "description": "Marks all items as incomplete in the shopping list.",
                "fields": {}
            },
            "clear_completed_items": {
                "name": "Clear completed items",
                "description": "Removes completed items from the shopping list.",
                "fields": {}
            },
            "sort": {
                "name": "Sort all items",
                "description": "Sorts all items by name in the shopping list.",
                "fields": {
                    "reverse": {
                        "default": false,
                        "selector": {
                            "boolean": null
                        },
                        "name": "Sort reverse",
                        "description": "Whether to sort in reverse (descending) order."
                    }
                }
            }
        }
    },
    {
        "domain": "schedule",
        "services": {
            "reload": {
                "name": "Reload",
                "description": "Reloads schedules from the YAML-configuration.",
                "fields": {}
            }
        }
    },
    {
        "domain": "input_datetime",
        "services": {
            "reload": {
                "name": "Reload",
                "description": "Reloads helpers from the YAML-configuration.",
                "fields": {}
            },
            "set_datetime": {
                "name": "Set",
                "description": "Sets the date and/or time.",
                "fields": {
                    "date": {
                        "example": "\"2019-04-20\"",
                        "selector": {
                            "text": null
                        },
                        "name": "Date",
                        "description": "The target date."
                    },
                    "time": {
                        "example": "\"05:04:20\"",
                        "selector": {
                            "time": null
                        },
                        "name": "Time",
                        "description": "The target time."
                    },
                    "datetime": {
                        "example": "\"2019-04-20 05:04:20\"",
                        "selector": {
                            "text": null
                        },
                        "name": "Date & time",
                        "description": "The target date & time."
                    },
                    "timestamp": {
                        "selector": {
                            "number": {
                                "min": 0,
                                "max": 9223372036854775807,
                                "mode": "box"
                            }
                        },
                        "name": "Timestamp",
                        "description": "The target date & time, expressed by a UNIX timestamp."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "input_datetime"
                            ]
                        }
                    ]
                }
            }
        }
    },
    {
        "domain": "notify",
        "services": {
            "send_message": {
                "name": "Send a notification message",
                "description": "Sends a notification message.",
                "fields": {
                    "message": {
                        "required": true,
                        "selector": {
                            "text": null
                        },
                        "name": "Message",
                        "description": "Your notification message."
                    },
                    "title": {
                        "required": false,
                        "selector": {
                            "text": null
                        },
                        "filter": {
                            "supported_features": [
                                1
                            ]
                        },
                        "name": "Title",
                        "description": "Title for your notification message."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "notify"
                            ]
                        }
                    ]
                }
            },
            "persistent_notification": {
                "name": "Send a persistent notification",
                "description": "Sends a notification that is visible in the notifications panel.",
                "fields": {
                    "message": {
                        "required": true,
                        "example": "The garage door has been open for 10 minutes.",
                        "selector": {
                            "text": null
                        },
                        "name": "Message",
                        "description": "Message body of the notification."
                    },
                    "title": {
                        "example": "Your Garage Door Friend",
                        "selector": {
                            "text": null
                        },
                        "name": "Title",
                        "description": "Title of the notification."
                    },
                    "data": {
                        "example": "platform specific",
                        "selector": {
                            "object": null
                        },
                        "name": "Data",
                        "description": "Some integrations provide extended functionality via this field. For more information, refer to the integration documentation."
                    }
                }
            },
            "notify": {
                "name": "Send a notification with notify",
                "description": "Sends a notification message using the notify service.",
                "fields": {
                    "message": {
                        "required": true,
                        "example": "The garage door has been open for 10 minutes.",
                        "selector": {
                            "text": null
                        }
                    },
                    "title": {
                        "example": "Your Garage Door Friend",
                        "selector": {
                            "text": null
                        }
                    },
                    "target": {
                        "example": "platform specific",
                        "selector": {
                            "object": null
                        }
                    },
                    "data": {
                        "example": "platform specific",
                        "selector": {
                            "object": null
                        }
                    }
                }
            }
        }
    },
    {
        "domain": "todo",
        "services": {
            "add_item": {
                "name": "Add item",
                "description": "Adds a new to-do list item.",
                "fields": {
                    "item": {
                        "required": true,
                        "example": "Submit income tax return",
                        "selector": {
                            "text": null
                        },
                        "name": "Item name",
                        "description": "The name that represents the to-do item."
                    },
                    "due_date": {
                        "filter": {
                            "supported_features": [
                                16
                            ]
                        },
                        "example": "2023-11-17",
                        "selector": {
                            "date": null
                        },
                        "name": "Due date",
                        "description": "The date the to-do item is expected to be completed."
                    },
                    "due_datetime": {
                        "filter": {
                            "supported_features": [
                                32
                            ]
                        },
                        "example": "2023-11-17 13:30:00",
                        "selector": {
                            "datetime": null
                        },
                        "name": "Due date and time",
                        "description": "The date and time the to-do item is expected to be completed."
                    },
                    "description": {
                        "filter": {
                            "supported_features": [
                                64
                            ]
                        },
                        "example": "A more complete description of the to-do item than that provided by the summary.",
                        "selector": {
                            "text": null
                        },
                        "name": "Description",
                        "description": "A more complete description of the to-do item than provided by the item name."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "todo"
                            ],
                            "supported_features": [
                                1
                            ]
                        }
                    ]
                }
            },
            "update_item": {
                "name": "Update item",
                "description": "Updates an existing to-do list item based on its name.",
                "fields": {
                    "item": {
                        "required": true,
                        "example": "Submit income tax return",
                        "selector": {
                            "text": null
                        },
                        "name": "Item name",
                        "description": "The current name of the to-do item."
                    },
                    "rename": {
                        "example": "Something else",
                        "selector": {
                            "text": null
                        },
                        "name": "Rename item",
                        "description": "The new name for the to-do item"
                    },
                    "status": {
                        "example": "needs_action",
                        "selector": {
                            "select": {
                                "translation_key": "status",
                                "options": [
                                    "needs_action",
                                    "completed"
                                ]
                            }
                        },
                        "name": "Set status",
                        "description": "A status or confirmation of the to-do item."
                    },
                    "due_date": {
                        "filter": {
                            "supported_features": [
                                16
                            ]
                        },
                        "example": "2023-11-17",
                        "selector": {
                            "date": null
                        },
                        "name": "Due date",
                        "description": "The date the to-do item is expected to be completed."
                    },
                    "due_datetime": {
                        "filter": {
                            "supported_features": [
                                32
                            ]
                        },
                        "example": "2023-11-17 13:30:00",
                        "selector": {
                            "datetime": null
                        },
                        "name": "Due date and time",
                        "description": "The date and time the to-do item is expected to be completed."
                    },
                    "description": {
                        "filter": {
                            "supported_features": [
                                64
                            ]
                        },
                        "example": "A more complete description of the to-do item than that provided by the summary.",
                        "selector": {
                            "text": null
                        },
                        "name": "Description",
                        "description": "A more complete description of the to-do item than provided by the item name."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "todo"
                            ],
                            "supported_features": [
                                4
                            ]
                        }
                    ]
                }
            },
            "remove_item": {
                "name": "Remove item",
                "description": "Removes an existing to-do list item by its name.",
                "fields": {
                    "item": {
                        "required": true,
                        "selector": {
                            "text": null
                        },
                        "name": "Item name",
                        "description": "The name for the to-do list item."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "todo"
                            ],
                            "supported_features": [
                                2
                            ]
                        }
                    ]
                }
            },
            "get_items": {
                "name": "Get items",
                "description": "Gets items on a to-do list.",
                "fields": {
                    "status": {
                        "example": "needs_action",
                        "default": "needs_action",
                        "selector": {
                            "select": {
                                "translation_key": "status",
                                "options": [
                                    "needs_action",
                                    "completed"
                                ],
                                "multiple": true
                            }
                        },
                        "name": "Status",
                        "description": "Only return to-do items with the specified statuses. Returns not completed actions by default."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "todo"
                            ]
                        }
                    ]
                },
                "response": {
                    "optional": false
                }
            },
            "remove_completed_items": {
                "name": "Remove completed items",
                "description": "Removes all to-do list items that have been completed.",
                "fields": {},
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "todo"
                            ],
                            "supported_features": [
                                2
                            ]
                        }
                    ]
                }
            }
        }
    },
    {
        "domain": "weather",
        "services": {
            "get_forecasts": {
                "name": "Get forecasts",
                "description": "Get weather forecasts.",
                "fields": {
                    "type": {
                        "required": true,
                        "selector": {
                            "select": {
                                "options": [
                                    "daily",
                                    "hourly",
                                    "twice_daily"
                                ],
                                "translation_key": "forecast_type"
                            }
                        },
                        "name": "Forecast type",
                        "description": "Forecast type: daily, hourly or twice daily."
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "weather"
                            ],
                            "supported_features": [
                                1,
                                2,
                                4
                            ]
                        }
                    ]
                },
                "response": {
                    "optional": false
                }
            }
        }
    },
    {
        "domain": "group",
        "services": {
            "reload": {
                "name": "Reload",
                "description": "Reloads group configuration, entities, and notify services from YAML-configuration.",
                "fields": {}
            },
            "set": {
                "name": "Set",
                "description": "Creates/Updates a group.",
                "fields": {
                    "object_id": {
                        "required": true,
                        "example": "test_group",
                        "selector": {
                            "text": null
                        },
                        "name": "Object ID",
                        "description": "Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]."
                    },
                    "name": {
                        "example": "My test group",
                        "selector": {
                            "text": null
                        },
                        "name": "Name",
                        "description": "Name of the group."
                    },
                    "icon": {
                        "example": "mdi:camera",
                        "selector": {
                            "icon": null
                        },
                        "name": "Icon",
                        "description": "Name of the icon for the group."
                    },
                    "entities": {
                        "example": "domain.entity_id1, domain.entity_id2",
                        "selector": {
                            "entity": {
                                "multiple": true
                            }
                        },
                        "name": "Entities",
                        "description": "List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`."
                    },
                    "add_entities": {
                        "example": "domain.entity_id1, domain.entity_id2",
                        "selector": {
                            "entity": {
                                "multiple": true
                            }
                        },
                        "name": "Add entities",
                        "description": "List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`."
                    },
                    "remove_entities": {
                        "example": "domain.entity_id1, domain.entity_id2",
                        "selector": {
                            "entity": {
                                "multiple": true
                            }
                        },
                        "name": "Remove entities",
                        "description": "List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`."
                    },
                    "all": {
                        "selector": {
                            "boolean": null
                        },
                        "name": "All",
                        "description": "Enable this option if the group should only be used when all entities are in state `on`."
                    }
                }
            },
            "remove": {
                "name": "Remove",
                "description": "Removes a group.",
                "fields": {
                    "object_id": {
                        "required": true,
                        "example": "test_group",
                        "selector": {
                            "object": null
                        },
                        "name": "Object ID",
                        "description": "Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]."
                    }
                }
            }
        }
    },
    {
        "domain": "light",
        "services": {
            "turn_on": {
                "name": "Turn on",
                "description": "Turns on one or more lights and adjusts their properties, even when they are turned on already.",
                "fields": {
                    "transition": {
                        "filter": {
                            "supported_features": [
                                32
                            ]
                        },
                        "selector": {
                            "number": {
                                "min": 0,
                                "max": 300,
                                "unit_of_measurement": "seconds"
                            }
                        },
                        "name": "Transition",
                        "description": "Duration it takes to get to next state."
                    },
                    "rgb_color": {
                        "filter": {
                            "attribute": {
                                "supported_color_modes": [
                                    "hs",
                                    "xy",
                                    "rgb",
                                    "rgbw",
                                    "rgbww"
                                ]
                            }
                        },
                        "example": "[255, 100, 100]",
                        "selector": {
                            "color_rgb": null
                        },
                        "name": "Color",
                        "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue."
                    },
                    "kelvin": {
                        "filter": {
                            "attribute": {
                                "supported_color_modes": [
                                    "color_temp",
                                    "hs",
                                    "xy",
                                    "rgb",
                                    "rgbw",
                                    "rgbww"
                                ]
                            }
                        },
                        "selector": {
                            "color_temp": {
                                "unit": "kelvin",
                                "min": 2000,
                                "max": 6500
                            }
                        },
                        "name": "Color temperature",
                        "description": "Color temperature in Kelvin."
                    },
                    "brightness_pct": {
                        "filter": {
                            "attribute": {
                                "supported_color_modes": [
                                    "brightness",
                                    "color_temp",
                                    "hs",
                                    "xy",
                                    "rgb",
                                    "rgbw",
                                    "rgbww"
                                ]
                            }
                        },
                        "selector": {
                            "number": {
                                "min": 0,
                                "max": 100,
                                "unit_of_measurement": "%"
                            }
                        },
                        "name": "Brightness",
                        "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness."
                    },
                    "brightness_step_pct": {
                        "filter": {
                            "attribute": {
                                "supported_color_modes": [
                                    "brightness",
                                    "color_temp",
                                    "hs",
                                    "xy",
                                    "rgb",
                                    "rgbw",
                                    "rgbww"
                                ]
                            }
                        },
                        "selector": {
                            "number": {
                                "min": -100,
                                "max": 100,
                                "unit_of_measurement": "%"
                            }
                        },
                        "name": "Brightness step",
                        "description": "Change brightness by a percentage."
                    },
                    "effect": {
                        "filter": {
                            "supported_features": [
                                4
                            ]
                        },
                        "selector": {
                            "text": null
                        },
                        "name": "Effect",
                        "description": "Light effect."
                    },
                    "advanced_fields": {
                        "collapsed": true,
                        "fields": {
                            "rgbw_color": {
                                "filter": {
                                    "attribute": {
                                        "supported_color_modes": [
                                            "hs",
                                            "xy",
                                            "rgb",
                                            "rgbw",
                                            "rgbww"
                                        ]
                                    }
                                },
                                "example": "[255, 100, 100, 50]",
                                "selector": {
                                    "object": null
                                }
                            },
                            "rgbww_color": {
                                "filter": {
                                    "attribute": {
                                        "supported_color_modes": [
                                            "hs",
                                            "xy",
                                            "rgb",
                                            "rgbw",
                                            "rgbww"
                                        ]
                                    }
                                },
                                "example": "[255, 100, 100, 50, 70]",
                                "selector": {
                                    "object": null
                                }
                            },
                            "color_name": {
                                "filter": {
                                    "attribute": {
                                        "supported_color_modes": [
                                            "hs",
                                            "xy",
                                            "rgb",
                                            "rgbw",
                                            "rgbww"
                                        ]
                                    }
                                },
                                "selector": {
                                    "select": {
                                        "translation_key": "color_name",
                                        "options": [
                                            "homeassistant",
                                            "aliceblue",
                                            "antiquewhite",
                                            "aqua",
                                            "aquamarine",
                                            "azure",
                                            "beige",
                                            "bisque",
                                            "blanchedalmond",
                                            "blue",
                                            "blueviolet",
                                            "brown",
                                            "burlywood",
                                            "cadetblue",
                                            "chartreuse",
                                            "chocolate",
                                            "coral",
                                            "cornflowerblue",
                                            "cornsilk",
                                            "crimson",
                                            "cyan",
                                            "darkblue",
                                            "darkcyan",
                                            "darkgoldenrod",
                                            "darkgray",
                                            "darkgreen",
                                            "darkgrey",
                                            "darkkhaki",
                                            "darkmagenta",
                                            "darkolivegreen",
                                            "darkorange",
                                            "darkorchid",
                                            "darkred",
                                            "darksalmon",
                                            "darkseagreen",
                                            "darkslateblue",
                                            "darkslategray",
                                            "darkslategrey",
                                            "darkturquoise",
                                            "darkviolet",
                                            "deeppink",
                                            "deepskyblue",
                                            "dimgray",
                                            "dimgrey",
                                            "dodgerblue",
                                            "firebrick",
                                            "floralwhite",
                                            "forestgreen",
                                            "fuchsia",
                                            "gainsboro",
                                            "ghostwhite",
                                            "gold",
                                            "goldenrod",
                                            "gray",
                                            "green",
                                            "greenyellow",
                                            "grey",
                                            "honeydew",
                                            "hotpink",
                                            "indianred",
                                            "indigo",
                                            "ivory",
                                            "khaki",
                                            "lavender",
                                            "lavenderblush",
                                            "lawngreen",
                                            "lemonchiffon",
                                            "lightblue",
                                            "lightcoral",
                                            "lightcyan",
                                            "lightgoldenrodyellow",
                                            "lightgray",
                                            "lightgreen",
                                            "lightgrey",
                                            "lightpink",
                                            "lightsalmon",
                                            "lightseagreen",
                                            "lightskyblue",
                                            "lightslategray",
                                            "lightslategrey",
                                            "lightsteelblue",
                                            "lightyellow",
                                            "lime",
                                            "limegreen",
                                            "linen",
                                            "magenta",
                                            "maroon",
                                            "mediumaquamarine",
                                            "mediumblue",
                                            "mediumorchid",
                                            "mediumpurple",
                                            "mediumseagreen",
                                            "mediumslateblue",
                                            "mediumspringgreen",
                                            "mediumturquoise",
                                            "mediumvioletred",
                                            "midnightblue",
                                            "mintcream",
                                            "mistyrose",
                                            "moccasin",
                                            "navajowhite",
                                            "navy",
                                            "navyblue",
                                            "oldlace",
                                            "olive",
                                            "olivedrab",
                                            "orange",
                                            "orangered",
                                            "orchid",
                                            "palegoldenrod",
                                            "palegreen",
                                            "paleturquoise",
                                            "palevioletred",
                                            "papayawhip",
                                            "peachpuff",
                                            "peru",
                                            "pink",
                                            "plum",
                                            "powderblue",
                                            "purple",
                                            "red",
                                            "rosybrown",
                                            "royalblue",
                                            "saddlebrown",
                                            "salmon",
                                            "sandybrown",
                                            "seagreen",
                                            "seashell",
                                            "sienna",
                                            "silver",
                                            "skyblue",
                                            "slateblue",
                                            "slategray",
                                            "slategrey",
                                            "snow",
                                            "springgreen",
                                            "steelblue",
                                            "tan",
                                            "teal",
                                            "thistle",
                                            "tomato",
                                            "turquoise",
                                            "violet",
                                            "wheat",
                                            "white",
                                            "whitesmoke",
                                            "yellow",
                                            "yellowgreen"
                                        ]
                                    }
                                }
                            },
                            "hs_color": {
                                "filter": {
                                    "attribute": {
                                        "supported_color_modes": [
                                            "hs",
                                            "xy",
                                            "rgb",
                                            "rgbw",
                                            "rgbww"
                                        ]
                                    }
                                },
                                "example": "[300, 70]",
                                "selector": {
                                    "object": null
                                }
                            },
                            "xy_color": {
                                "filter": {
                                    "attribute": {
                                        "supported_color_modes": [
                                            "hs",
                                            "xy",
                                            "rgb",
                                            "rgbw",
                                            "rgbww"
                                        ]
                                    }
                                },
                                "example": "[0.52, 0.43]",
                                "selector": {
                                    "object": null
                                }
                            },
                            "color_temp": {
                                "filter": {
                                    "attribute": {
                                        "supported_color_modes": [
                                            "color_temp",
                                            "hs",
                                            "xy",
                                            "rgb",
                                            "rgbw",
                                            "rgbww"
                                        ]
                                    }
                                },
                                "selector": {
                                    "color_temp": {
                                        "unit": "mired",
                                        "min": 153,
                                        "max": 500
                                    }
                                }
                            },
                            "brightness": {
                                "filter": {
                                    "attribute": {
                                        "supported_color_modes": [
                                            "brightness",
                                            "color_temp",
                                            "hs",
                                            "xy",
                                            "rgb",
                                            "rgbw",
                                            "rgbww"
                                        ]
                                    }
                                },
                                "selector": {
                                    "number": {
                                        "min": 0,
                                        "max": 255
                                    }
                                }
                            },
                            "brightness_step": {
                                "filter": {
                                    "attribute": {
                                        "supported_color_modes": [
                                            "brightness",
                                            "color_temp",
                                            "hs",
                                            "xy",
                                            "rgb",
                                            "rgbw",
                                            "rgbww"
                                        ]
                                    }
                                },
                                "selector": {
                                    "number": {
                                        "min": -225,
                                        "max": 255
                                    }
                                }
                            },
                            "white": {
                                "filter": {
                                    "attribute": {
                                        "supported_color_modes": [
                                            "white"
                                        ]
                                    }
                                },
                                "selector": {
                                    "constant": {
                                        "value": true,
                                        "label": "Enabled"
                                    }
                                }
                            },
                            "profile": {
                                "example": "relax",
                                "selector": {
                                    "text": null
                                }
                            },
                            "flash": {
                                "filter": {
                                    "supported_features": [
                                        8
                                    ]
                                },
                                "selector": {
                                    "select": {
                                        "options": [
                                            {
                                                "label": "Long",
                                                "value": "long"
                                            },
                                            {
                                                "label": "Short",
                                                "value": "short"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "light"
                            ]
                        }
                    ]
                }
            },
            "turn_off": {
                "name": "Turn off",
                "description": "Turns off one or more lights.",
                "fields": {
                    "transition": {
                        "filter": {
                            "supported_features": [
                                32
                            ]
                        },
                        "selector": {
                            "number": {
                                "min": 0,
                                "max": 300,
                                "unit_of_measurement": "seconds"
                            }
                        },
                        "name": "Transition",
                        "description": "Duration it takes to get to next state."
                    },
                    "advanced_fields": {
                        "collapsed": true,
                        "fields": {
                            "flash": {
                                "filter": {
                                    "supported_features": [
                                        8
                                    ]
                                },
                                "selector": {
                                    "select": {
                                        "options": [
                                            {
                                                "label": "Long",
                                                "value": "long"
                                            },
                                            {
                                                "label": "Short",
                                                "value": "short"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "light"
                            ]
                        }
                    ]
                }
            },
            "toggle": {
                "name": "Toggle",
                "description": "Toggles one or more lights, from on to off, or off to on, based on their current state.",
                "fields": {
                    "transition": {
                        "filter": {
                            "supported_features": [
                                32
                            ]
                        },
                        "selector": {
                            "number": {
                                "min": 0,
                                "max": 300,
                                "unit_of_measurement": "seconds"
                            }
                        },
                        "name": "Transition",
                        "description": "Duration it takes to get to next state."
                    },
                    "rgb_color": {
                        "filter": {
                            "attribute": {
                                "supported_color_modes": [
                                    "hs",
                                    "xy",
                                    "rgb",
                                    "rgbw",
                                    "rgbww"
                                ]
                            }
                        },
                        "example": "[255, 100, 100]",
                        "selector": {
                            "color_rgb": null
                        },
                        "name": "Color",
                        "description": "The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue."
                    },
                    "kelvin": {
                        "filter": {
                            "attribute": {
                                "supported_color_modes": [
                                    "color_temp",
                                    "hs",
                                    "xy",
                                    "rgb",
                                    "rgbw",
                                    "rgbww"
                                ]
                            }
                        },
                        "selector": {
                            "color_temp": {
                                "unit": "kelvin",
                                "min": 2000,
                                "max": 6500
                            }
                        },
                        "name": "Color temperature",
                        "description": "Color temperature in Kelvin."
                    },
                    "brightness_pct": {
                        "filter": {
                            "attribute": {
                                "supported_color_modes": [
                                    "brightness",
                                    "color_temp",
                                    "hs",
                                    "xy",
                                    "rgb",
                                    "rgbw",
                                    "rgbww"
                                ]
                            }
                        },
                        "selector": {
                            "number": {
                                "min": 0,
                                "max": 100,
                                "unit_of_measurement": "%"
                            }
                        },
                        "name": "Brightness",
                        "description": "Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness."
                    },
                    "effect": {
                        "filter": {
                            "supported_features": [
                                4
                            ]
                        },
                        "selector": {
                            "text": null
                        },
                        "name": "Effect",
                        "description": "Light effect."
                    },
                    "advanced_fields": {
                        "collapsed": true,
                        "fields": {
                            "rgbw_color": {
                                "filter": {
                                    "attribute": {
                                        "supported_color_modes": [
                                            "hs",
                                            "xy",
                                            "rgb",
                                            "rgbw",
                                            "rgbww"
                                        ]
                                    }
                                },
                                "example": "[255, 100, 100, 50]",
                                "selector": {
                                    "object": null
                                }
                            },
                            "rgbww_color": {
                                "filter": {
                                    "attribute": {
                                        "supported_color_modes": [
                                            "hs",
                                            "xy",
                                            "rgb",
                                            "rgbw",
                                            "rgbww"
                                        ]
                                    }
                                },
                                "example": "[255, 100, 100, 50, 70]",
                                "selector": {
                                    "object": null
                                }
                            },
                            "color_name": {
                                "filter": {
                                    "attribute": {
                                        "supported_color_modes": [
                                            "hs",
                                            "xy",
                                            "rgb",
                                            "rgbw",
                                            "rgbww"
                                        ]
                                    }
                                },
                                "selector": {
                                    "select": {
                                        "translation_key": "color_name",
                                        "options": [
                                            "homeassistant",
                                            "aliceblue",
                                            "antiquewhite",
                                            "aqua",
                                            "aquamarine",
                                            "azure",
                                            "beige",
                                            "bisque",
                                            "blanchedalmond",
                                            "blue",
                                            "blueviolet",
                                            "brown",
                                            "burlywood",
                                            "cadetblue",
                                            "chartreuse",
                                            "chocolate",
                                            "coral",
                                            "cornflowerblue",
                                            "cornsilk",
                                            "crimson",
                                            "cyan",
                                            "darkblue",
                                            "darkcyan",
                                            "darkgoldenrod",
                                            "darkgray",
                                            "darkgreen",
                                            "darkgrey",
                                            "darkkhaki",
                                            "darkmagenta",
                                            "darkolivegreen",
                                            "darkorange",
                                            "darkorchid",
                                            "darkred",
                                            "darksalmon",
                                            "darkseagreen",
                                            "darkslateblue",
                                            "darkslategray",
                                            "darkslategrey",
                                            "darkturquoise",
                                            "darkviolet",
                                            "deeppink",
                                            "deepskyblue",
                                            "dimgray",
                                            "dimgrey",
                                            "dodgerblue",
                                            "firebrick",
                                            "floralwhite",
                                            "forestgreen",
                                            "fuchsia",
                                            "gainsboro",
                                            "ghostwhite",
                                            "gold",
                                            "goldenrod",
                                            "gray",
                                            "green",
                                            "greenyellow",
                                            "grey",
                                            "honeydew",
                                            "hotpink",
                                            "indianred",
                                            "indigo",
                                            "ivory",
                                            "khaki",
                                            "lavender",
                                            "lavenderblush",
                                            "lawngreen",
                                            "lemonchiffon",
                                            "lightblue",
                                            "lightcoral",
                                            "lightcyan",
                                            "lightgoldenrodyellow",
                                            "lightgray",
                                            "lightgreen",
                                            "lightgrey",
                                            "lightpink",
                                            "lightsalmon",
                                            "lightseagreen",
                                            "lightskyblue",
                                            "lightslategray",
                                            "lightslategrey",
                                            "lightsteelblue",
                                            "lightyellow",
                                            "lime",
                                            "limegreen",
                                            "linen",
                                            "magenta",
                                            "maroon",
                                            "mediumaquamarine",
                                            "mediumblue",
                                            "mediumorchid",
                                            "mediumpurple",
                                            "mediumseagreen",
                                            "mediumslateblue",
                                            "mediumspringgreen",
                                            "mediumturquoise",
                                            "mediumvioletred",
                                            "midnightblue",
                                            "mintcream",
                                            "mistyrose",
                                            "moccasin",
                                            "navajowhite",
                                            "navy",
                                            "navyblue",
                                            "oldlace",
                                            "olive",
                                            "olivedrab",
                                            "orange",
                                            "orangered",
                                            "orchid",
                                            "palegoldenrod",
                                            "palegreen",
                                            "paleturquoise",
                                            "palevioletred",
                                            "papayawhip",
                                            "peachpuff",
                                            "peru",
                                            "pink",
                                            "plum",
                                            "powderblue",
                                            "purple",
                                            "red",
                                            "rosybrown",
                                            "royalblue",
                                            "saddlebrown",
                                            "salmon",
                                            "sandybrown",
                                            "seagreen",
                                            "seashell",
                                            "sienna",
                                            "silver",
                                            "skyblue",
                                            "slateblue",
                                            "slategray",
                                            "slategrey",
                                            "snow",
                                            "springgreen",
                                            "steelblue",
                                            "tan",
                                            "teal",
                                            "thistle",
                                            "tomato",
                                            "turquoise",
                                            "violet",
                                            "wheat",
                                            "white",
                                            "whitesmoke",
                                            "yellow",
                                            "yellowgreen"
                                        ]
                                    }
                                }
                            },
                            "hs_color": {
                                "filter": {
                                    "attribute": {
                                        "supported_color_modes": [
                                            "hs",
                                            "xy",
                                            "rgb",
                                            "rgbw",
                                            "rgbww"
                                        ]
                                    }
                                },
                                "example": "[300, 70]",
                                "selector": {
                                    "object": null
                                }
                            },
                            "xy_color": {
                                "filter": {
                                    "attribute": {
                                        "supported_color_modes": [
                                            "hs",
                                            "xy",
                                            "rgb",
                                            "rgbw",
                                            "rgbww"
                                        ]
                                    }
                                },
                                "example": "[0.52, 0.43]",
                                "selector": {
                                    "object": null
                                }
                            },
                            "color_temp": {
                                "filter": {
                                    "attribute": {
                                        "supported_color_modes": [
                                            "color_temp",
                                            "hs",
                                            "xy",
                                            "rgb",
                                            "rgbw",
                                            "rgbww"
                                        ]
                                    }
                                },
                                "selector": {
                                    "color_temp": {
                                        "unit": "mired",
                                        "min": 153,
                                        "max": 500
                                    }
                                }
                            },
                            "brightness": {
                                "filter": {
                                    "attribute": {
                                        "supported_color_modes": [
                                            "brightness",
                                            "color_temp",
                                            "hs",
                                            "xy",
                                            "rgb",
                                            "rgbw",
                                            "rgbww"
                                        ]
                                    }
                                },
                                "selector": {
                                    "number": {
                                        "min": 0,
                                        "max": 255
                                    }
                                }
                            },
                            "white": {
                                "filter": {
                                    "attribute": {
                                        "supported_color_modes": [
                                            "white"
                                        ]
                                    }
                                },
                                "selector": {
                                    "constant": {
                                        "value": true,
                                        "label": "Enabled"
                                    }
                                }
                            },
                            "profile": {
                                "example": "relax",
                                "selector": {
                                    "text": null
                                }
                            },
                            "flash": {
                                "filter": {
                                    "supported_features": [
                                        8
                                    ]
                                },
                                "selector": {
                                    "select": {
                                        "options": [
                                            {
                                                "label": "Long",
                                                "value": "long"
                                            },
                                            {
                                                "label": "Short",
                                                "value": "short"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "target": {
                    "entity": [
                        {
                            "domain": [
                                "light"
                            ]
                        }
                    ]
                }
            }
        }
    }
]
